{
	"meta":{
		
		"title":"Intro Into SCSS v0.1",
		"autor":"James R. Williams"
		
	},
	
	"chapters":{
		
		"0":{
			
			"title":"Variables",
			"desc":"Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse. Sass uses the $ symbol to make something a variable. \n Change the scss below to use the variable",
			"question":"$colour_Red: #FF0000;",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"header * { background: $colour_Red; }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF;",
				"4":"$colour_Red: #FF0000;"
				
			}

			
		},
		"1":{
			
			"title":"Nesting",
			"desc":"When writing HTML you've probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn't. SASS will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice.",
			"question":"h1 {\n\n \tcolor:red;\n\n}",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"h1 * { color:blue }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF"
				
			}

			
		},
		"2":{
			
			"title":"Partials",
			"desc":"You can create partial SASS files that contain little snippets of CSS that you can include in other SASS files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is simply a SASS file named with a leading underscore. You might name it something like _partial.scss. The underscore lets SASS know that the file is only a partial file and that it should not be generated into a CSS file. SASS partials are used with the @import directive.",
			"question":"h1 {\n\n \tcolor:red;\n\n}",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"h1 * { color:blue }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF"
				
			}

			
		},
		"3":{
			
			"title":"Imports",
			"desc":"CSS has an import option that lets you split your CSS into smaller, more maintainable portions. The only drawback is that each time you use @import in CSS it creates another HTTP request. SASS builds on top of the current CSS @import but instead of requiring an HTTP request, SASS will take the file that you want to import and combine it with the file you're importing into so you can serve a single CSS file to the web browser.",
			"question":"h1 {\n\n \tcolor:red;\n\n}",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"h1 * { color:blue }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF"
				
			}

			
		},
		"4":{
			
			"title":"Mixins",
			"desc":"Some things in CSS are a bit tedious to write, especially with CSS3 and the many vendor prefixes that exist. A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible. A good use of a mixin is for vendor prefixes. Here's an example for border-radius.",
			"question":"h1 {\n\n \tcolor:red;\n\n}",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"h1 * { color:blue }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF"
				
			}

			
		},
		"5":{
			
			"title":"Extend & Inheritance",
			"desc":"This is one of the most useful features of SASS. Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your SASS very DRY. In our example we're going to create a simple series of messaging for errors, warnings and successes.",
			"question":"h1 {\n\n \tcolor:red;\n\n}",
			"tips":{
				
				"0":"I haven’t slept for ten days, because that would be too long.",
				"1":"A burrito is a sleeping bag for ground beef.",
				"2":"An escalator can never break — it can only become stairs."
				
			},
			"answers":{
				
				"0":"h1 * { color:blue }",
				"1":"h1 * { color: blue }",
				"2":"color: #00F;",
				"3":"color: #0000FF"
				
			}

			
		}
		
	}
	
	
}